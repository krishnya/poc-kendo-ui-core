@page
@using AdminDashboard.Data.Models.Categories
@using AdminDashboard.Data.Models.Titles
@using Microsoft.AspNetCore.Html
@model AdminDashboard.Pages.SettingsModel
@{
    Layout = "/Pages/Shared/_AppLayout.cshtml";
    ViewData["Title"] = "Settings";
}
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@Html.AntiForgeryToken()

<div class="tile">
    <div class="k-card">
        <div class="k-card-body">
            @(Html.Kendo().TabStrip()
                    .Name("tabstrip")
                    .Items(tabstrip =>
                    {
                        tabstrip.Add().Text("Categories")
                            .Selected(true)
                            .Content(
                                @<text>
                                    @(Html.Kendo().Grid<Category>().Name("categoryGrid")                
                                    .Sortable()
                                    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("CategoryEditor").Window(w => w.Events(e => e.Open("onPopupOpen"))))
                                    .Scrollable()
                                    .ToolBar(x =>
                                    {
                                    x.Create();
                                    x.Excel();
                                    })
                                    .Columns(columns =>
                                    {
                                    //columns.Bound(c => c.Id).Hidden();
                                    columns.Bound(c => c.CategoryName);
                                    columns.Bound(c => c.Code);
                                    columns.Bound(c => c.Amount);
                                    columns.Command(column =>
                                    {
                                    column.Edit();
                                    column.Destroy();
                                    });
                                    })
                                    .Excel(excel => excel
                                    .FileName("Export.xlsx")
                                    .Filterable(true)
                                    .ProxyURL("/Settings?handler=Save")
                                    )
                                    .DataSource(ds => ds.Ajax()
                                    .Read(r => r.Url("/Settings?handler=Read").Data("forgeryToken"))
                                    .Update(u => u.Url("/Settings?handler=Update").Data("forgeryToken"))
                                    .Create(c => c.Url("/Settings?handler=Create").Data("forgeryToken"))
                                    .Destroy(d => d.Url("/Settings?handler=Destroy").Data("forgeryToken"))
                                    .Model(m =>
                                    {
                                    m.Id(id => id.Id);
                                    m.Field(f => f.Id).Editable(false);
                                    })
                                    .Events(events => events.Error("grid_error")) // Handle the "error" event.
                                    .PageSize(10)
                                    )
                                    .Pageable()
                                    )
                                </text>);
                        tabstrip.Add().Text("Titles")
                            .Content(
                                @<text>
                                    @(Html.Kendo().Grid<Title>().Name("titleGrid")
                                    .Sortable()
                                    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("TitleEditor").Window(w => w.Events(e => e.Open("onPopupOpen"))))
                                    .Scrollable()
                                    .ToolBar(x =>
                                    {
                                    x.Create();
                                    x.Excel();
                                    })
                                    .Columns(columns =>
                                    {
                                    //columns.Bound(t => t.Id).Hidden();
                                    columns.Bound(t => t.TitleName);
                                    columns.ForeignKey(t => t.CategoryId, ds => ds.Read(read => read.Url(Url.Page("Settings", "GetCategories"))), "Id", "CategoryName", true);
                                    //.Title("Category").EditorTemplateName("CategoryEditor").Width(200);
                                    columns.Command(column =>
                                    {
                                    column.Edit();
                                    column.Destroy();
                                    });
                                    })
                                    .Excel(excel => excel
                                    .FileName("Export.xlsx")
                                    .Filterable(true)
                                    .ProxyURL("/Settings?handler=Save")
                                    )
                                    .DataSource(ds => ds.Ajax()
                                    .Read(r => r.Url("/Settings?handler=ReadTitle").Data("forgeryToken"))
                                    .Update(u => u.Url("/Settings?handler=UpdateTitle").Data("forgeryToken"))
                                    .Create(c => c.Url("/Settings?handler=CreateTitle").Data("forgeryToken"))
                                    .Destroy(d => d.Url("/Settings?handler=DestroyTitle").Data("forgeryToken"))
                                    .Model(m =>
                                    {
                                    m.Id(id => id.Id);
                                    m.Field(f => f.Id).Editable(false);
                                    })
                                    .Events(events => events.Error("grid_error")) // Handle the "error" event.
                                    .PageSize(10)
                                    )
                                    .Pageable()
                                    )
                            </text>);                        
                    })
                )
        </div>
    </div>
</div>

<script>
    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }

    // $(document).ready(function () {
    //     // Handle click event of delete button
    //     $(document).on("click", ".k-grid .k-grid-delete", function (e) {
    //         // Prevent the default action
    //         e.preventDefault();

    //         // Show confirmation dialog
    //         var confirmation = confirm("Are you sure you want to delete this record?");
    //         if (confirmation) {
    //             // If confirmed, trigger the click event of the delete button
    //             var grid = $(this).closest(".k-grid").data("kendoGrid");
    //             var row = $(this).closest("tr");
    //             grid.removeRow(row);
    //         }
    //     });
    // });


    function onPopupOpen(e) {
        // Delay hiding validation messages
        setTimeout(function () {
            e.sender.element.find(".field-validation-error").hide();
        }, 100); // Adjust delay as needed
    }

    function grid_error(e) {
        var errors = e.errors;
        if (errors) {
            var grid = $("#categoryGrid").data("kendoGrid");
            grid.one("dataBinding", function (e) {
                e.preventDefault();
                $.each(errors, function (key, value) {
                    var message = "";
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }

                    // As long as the key matches the field name, this line of code will be displayed as validation message in the popup.
                    grid.editable.element.find("[data-valmsg-for='" + key + "']").replaceWith('<div class="k-tooltip k-tooltip-error k-validator-tooltip k-invalid-msg field-validation-error" ><span class="k-tooltip-icon k-icon k-i-warning"></span><span class="k-tooltip-content">' + message + '</span><span class="k-callout k-callout-n"></span></div>').show();
                });
            });
        } else if (e.xhr) {
            alert(e.xhr.responseJSON.message);
        }

    }
</script>

<style>
    /*   .wrapper {
            height: 455px;
            margin: 20px auto;
            padding: 20px 0 0 0;
            # background: url('https://demos.telerik.com/kendo-ui/content/web/tabstrip/bmw.png') no-repeat center 60px transparent;
        } */
    .k-window-content {
        resize: both;
        overflow: auto;
    }
    .tile {
        background-color: #f5f5f5; /* light gray */
        padding: 16px;
        border-radius: 5px;
    }

    #tabstrip-container {
        background-color: lightgray;
        padding: 20px;
        border-radius: 5px;
    }

    /*    #tabstrip {
            max-width: 400px;
            float: left;
            margin-bottom: 20px;
        } */

    #tabstrip .k-content {
        height: 65vh !important;
        overflow: auto;
    }

    .specification {
        max-width: 670px;
        margin: 10px 0;
        padding: 0;
    }

        .specification dt, dd {
            max-width: 140px;
            float: left;
            margin: 0;
            padding: 5px 0 8px 0;
        }

        .specification dt {
            clear: left;
            width: 100px;
            margin-right: 7px;
            padding-right: 0;
            opacity: 0.7;
        }

        .specification:after, .wrapper:after {
            content: ".";
            display: block;
            clear: both;
            height: 0;
            visibility: hidden;
        }
</style>
